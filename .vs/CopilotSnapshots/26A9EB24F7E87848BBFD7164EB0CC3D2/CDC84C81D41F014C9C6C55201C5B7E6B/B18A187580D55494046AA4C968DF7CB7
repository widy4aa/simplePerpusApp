using System;
using Npgsql;
using System.Threading.Tasks;

namespace PerpusApp.Data
{
    /// <summary>
    /// Singleton Pattern: Memastikan hanya ada satu instance dari koneksi database
    /// yang digunakan di seluruh aplikasi. Pattern ini memastikan penggunaan resource
    /// yang efisien dan sentralisasi kontrol koneksi.
    /// </summary>
    public class DatabaseConnectionSingleton
    {
        // Instance tunggal yang disimpan secara statis
        // Hanya bisa diakses melalui method GetInstance()
        private static DatabaseConnectionSingleton _instance;
        
        // Lock object untuk thread safety - mencegah race condition saat inisialisasi
        // pada environment multi-thread
        private static readonly object _lock = new object();
        
        // Menyimpan connection string sebagai readonly field untuk keamanan
        private readonly string _connectionString;
        
        // Constructor private sehingga tidak bisa di-instantiate dari luar class ini
        // Ini adalah kunci utama dari pattern Singleton
        private DatabaseConnectionSingleton(string connectionString)
        {
            _connectionString = connectionString;
            // Tidak lagi mencetak pesan ke konsol, hanya membuat instance
        }
        
        /// <summary>
        /// Method untuk mendapatkan instance tunggal (lazy initialization)
        /// Lazy initialization berarti instance hanya dibuat saat benar-benar dibutuhkan
        /// </summary>
        /// <param name="connectionString">String koneksi database</param>
        /// <returns>Instance tunggal dari DatabaseConnectionSingleton</returns>
        public static DatabaseConnectionSingleton GetInstance(string connectionString)
        {
            // Double-check locking pattern:
            // 1. Cek pertama tanpa lock untuk performa
            if (_instance == null)
            {
                // 2. Lock untuk thread safety - memastikan hanya satu thread yang bisa
                // membuat instance baru jika belum ada
                lock (_lock)
                {
                    // 3. Cek kedua dengan lock untuk memastikan instance belum dibuat
                    // oleh thread lain selama thread ini menunggu lock
                    if (_instance == null)
                    {
                        _instance = new DatabaseConnectionSingleton(connectionString);
                    }
                }
            }
            return _instance;
        }
        
        /// <summary>
        /// Membuat koneksi baru ke database menggunakan connection string yang disimpan
        /// </summary>
        /// <returns>NpgsqlConnection yang siap digunakan</returns>
        public NpgsqlConnection CreateConnection()
        {
            return new NpgsqlConnection(_connectionString);
        }
        
        /// <summary>
        /// Menguji koneksi ke database secara asynchronous
        /// </summary>
        /// <returns>True jika koneksi berhasil, False jika gagal</returns>
        public async Task<bool> TestConnectionAsync()
        {
            try
            {
                // Menggunakan using statement untuk memastikan koneksi ditutup
                // dengan benar setelah selesai digunakan
                using (var connection = CreateConnection())
                {
                    await connection.OpenAsync();
                    return true;
                }
            }
            catch (Exception)
            {
                // Menelan exception dan mengembalikan false sebagai indikator kegagalan
                return false;
            }
        }
    }
}
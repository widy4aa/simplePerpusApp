using System;

namespace PerpusApp.Models
{
    /// <summary>
    /// IPerpustakaanItem: Interface yang berperan sebagai Abstract Product dalam Factory Method Pattern.
    /// Mendefinisikan kontrak yang harus diimplementasikan oleh semua jenis item perpustakaan.
    /// </summary>
    public interface IPerpustakaanItem
    {
        /// <summary>
        /// ID unik dari item
        /// </summary>
        int Id { get; }
        
        /// <summary>
        /// Mengembalikan informasi yang akan ditampilkan tentang item
        /// </summary>
        string GetDisplayInfo();
        
        /// <summary>
        /// Mengecek apakah item tersedia untuk dipinjam
        /// </summary>
        bool IsAvailable();
    }
    
    /// <summary>
    /// BukuItem: Concrete Product pertama yang mengimplementasikan IPerpustakaanItem.
    /// Merepresentasikan buku dalam koleksi perpustakaan.
    /// </summary>
    public class BukuItem : IPerpustakaanItem
    {
        // Composition: BukuItem memiliki referensi ke objek Buku
        private readonly Buku _buku;
        
        public BukuItem(Buku buku)
        {
            _buku = buku;
        }
        
        // Implementasi property dari interface
        public int Id => _buku.Id;
        
        // Implementasi method dari interface
        public string GetDisplayInfo()
        {
            return $"Buku: {_buku.Judul} oleh {_buku.Penulis} ({_buku.Kategori})";
        }
        
        public bool IsAvailable()
        {
            // Buku tersedia jika jumlah stok lebih dari 0
            return _buku.JumlahStok > 0;
        }
    }
    
    /// <summary>
    /// MajalahItem: Concrete Product kedua yang mengimplementasikan IPerpustakaanItem.
    /// Merepresentasikan majalah dalam koleksi perpustakaan.
    /// </summary>
    public class MajalahItem : IPerpustakaanItem
    {
        // Properties untuk menyimpan data majalah
        public int Id { get; private set; }
        public string Judul { get; private set; }
        public string Edisi { get; private set; }
        public int Stok { get; private set; }
        
        public MajalahItem(int id, string judul, string edisi, int stok)
        {
            Id = id;
            Judul = judul;
            Edisi = edisi;
            Stok = stok;
        }
        
        // Implementasi method dari interface
        public string GetDisplayInfo()
        {
            return $"Majalah: {Judul} Edisi {Edisi}";
        }
        
        public bool IsAvailable()
        {
            // Majalah tersedia jika stok lebih dari 0
            return Stok > 0;
        }
    }
    
    /// <summary>
    /// MediaDigitalItem: Concrete Product ketiga yang mengimplementasikan IPerpustakaanItem.
    /// Merepresentasikan media digital (video, audio, dll) dalam koleksi perpustakaan.
    /// </summary>
    public class MediaDigitalItem : IPerpustakaanItem
    {
        // Properties untuk menyimpan data media digital
        public int Id { get; private set; }
        public string Judul { get; private set; }
        public string Format { get; private set; }
        public bool Tersedia { get; private set; }
        
        public MediaDigitalItem(int id, string judul, string format, bool tersedia)
        {
            Id = id;
            Judul = judul;
            Format = format;
            Tersedia = tersedia;
        }
        
        // Implementasi method dari interface
        public string GetDisplayInfo()
        {
            return $"Media Digital: {Judul} ({Format})";
        }
        
        public bool IsAvailable()
        {
            // Media digital tersedia jika flag Tersedia bernilai true
            return Tersedia;
        }
    }
    
    /// <summary>
    /// PerpustakaanItemFactory: Abstract Creator dalam Factory Method Pattern.
    /// Mendefinisikan method abstrak CreateItem() yang harus diimplementasikan oleh subclass.
    /// Ini adalah inti dari Factory Method Pattern - menyediakan template untuk menciptakan objek,
    /// tapi membiarkan subclass menentukan kelas spesifik yang akan diinstansiasi.
    /// </summary>
    public abstract class PerpustakaanItemFactory
    {
        /// <summary>
        /// Factory Method: Method abstrak yang harus diimplementasikan oleh subclass
        /// untuk menentukan jenis item yang akan dibuat.
        /// </summary>
        public abstract IPerpustakaanItem CreateItem();
        
        /// <summary>
        /// Method umum yang menggunakan Factory Method.
        /// Ini menunjukkan bagaimana Factory Method digunakan dalam konteks.
        /// </summary>
        public string GetItemInfo()
        {
            // Memanggil factory method untuk mendapatkan objek
            // tanpa perlu tahu kelas konkret apa yang akan dibuat
            IPerpustakaanItem item = CreateItem();
            
            // Menggunakan objek yang dibuat melalui interface-nya
            return $"Item {item.Id}: {item.GetDisplayInfo()} - {(item.IsAvailable() ? "Tersedia" : "Tidak Tersedia")}";
        }
    }
    
    /// <summary>
    /// BukuItemFactory: Concrete Creator pertama yang mengimplementasikan PerpustakaanItemFactory.
    /// Bertanggung jawab untuk membuat objek BukuItem.
    /// </summary>
    public class BukuItemFactory : PerpustakaanItemFactory
    {
        private readonly Buku _buku;
        
        public BukuItemFactory(Buku buku)
        {
            _buku = buku;
        }
        
        /// <summary>
        /// Implementasi Factory Method untuk membuat dan mengembalikan BukuItem
        /// </summary>
        public override IPerpustakaanItem CreateItem()
        {
            return new BukuItem(_buku);
        }
    }
    
    /// <summary>
    /// MajalahItemFactory: Concrete Creator kedua yang mengimplementasikan PerpustakaanItemFactory.
    /// Bertanggung jawab untuk membuat objek MajalahItem.
    /// </summary>
    public class MajalahItemFactory : PerpustakaanItemFactory
    {
        // Fields untuk menyimpan data yang dibutuhkan untuk membuat MajalahItem
        private readonly int _id;
        private readonly string _judul;
        private readonly string _edisi;
        private readonly int _stok;
        
        public MajalahItemFactory(int id, string judul, string edisi, int stok)
        {
            _id = id;
            _judul = judul;
            _edisi = edisi;
            _stok = stok;
        }
        
        /// <summary>
        /// Implementasi Factory Method untuk membuat dan mengembalikan MajalahItem
        /// </summary>
        public override IPerpustakaanItem CreateItem()
        {
            return new MajalahItem(_id, _judul, _edisi, _stok);
        }
    }
    
    /// <summary>
    /// MediaDigitalItemFactory: Concrete Creator ketiga yang mengimplementasikan PerpustakaanItemFactory.
    /// Bertanggung jawab untuk membuat objek MediaDigitalItem.
    /// </summary>
    public class MediaDigitalItemFactory : PerpustakaanItemFactory
    {
        // Fields untuk menyimpan data yang dibutuhkan untuk membuat MediaDigitalItem
        private readonly int _id;
        private readonly string _judul;
        private readonly string _format;
        private readonly bool _tersedia;
        
        public MediaDigitalItemFactory(int id, string judul, string format, bool tersedia)
        {
            _id = id;
            _judul = judul;
            _format = format;
            _tersedia = tersedia;
        }
        
        /// <summary>
        /// Implementasi Factory Method untuk membuat dan mengembalikan MediaDigitalItem
        /// </summary>
        public override IPerpustakaanItem CreateItem()
        {
            return new MediaDigitalItem(_id, _judul, _format, _tersedia);
        }
    }
}